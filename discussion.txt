1. test1, test5, test16. These test cases have very few nested code blocks and no function calls. This means there are few scopes to track and fewer points of failure
2. test7, test13, test19, test21. These cases have lots of nesting and function calls which means a well implemented stack of symbol tables is critical to passing the test case.
3.
enterProgram(LittleParser.ProgramContext ctx)
enterPgm_body(LittleParser.Pgm_bodyContext ctx)
exitPgm_body(LittleParser.Pgm_bodyContext ctx)
enterDecl(LittleParser.DeclContext ctx)
enterStr(LittleParser.StrContext ctx)
enterVar_decl(LittleParser.Var_declContext ctx)
enterVar_type(LittleParser.Var_typeContext ctx)
enterAny_type(LittleParser.Any_typeContext ctx)
enterId_list(LittleParser.Id_listContext ctx)
exitId_list(LittleParser.Id_listContext ctx)
enterId_tail(LittleParser.Id_tailContext ctx)
enterParam_decl_list(LittleParser.Param_decl_listContext ctx)
exitParam_decl_list(LittleParser.Param_decl_listContext ctx)
enterParam_decl(LittleParser.Param_declContext ctx)
enterParam_decl_tail(LittleParser.Param_decl_tailContext ctx)
enterFunc_declarations(LittleParser.Func_declarationsContext ctx)
exitFunc_declarations(LittleParser.Func_declarationsContext ctx)
enterFunc_decl(LittleParser.Func_declContext ctx)
enterFunc_body(LittleParser.Func_bodyContext ctx)
exitFunc_body(LittleParser.Func_bodyContext ctx)
enterStmt_list(LittleParser.Stmt_listContext ctx)
exitStmt_list(LittleParser.Stmt_listContext ctx)
enterStmt(LittleParser.StmtContext ctx)
enterBase_stmt(LittleParser.Base_stmtContext ctx)
enterAssign_stmt(LittleParser.Assign_stmtContext ctx)
enterAssign_expr(LittleParser.Assign_exprContext ctx)
enterRead_stmt(LittleParser.Read_stmtContext ctx)
enterWrite_stmt(LittleParser.Write_stmtContext ctx)
enterReturn_stmt(LittleParser.Return_stmtContext ctx)
enterExpr(LittleParser.ExprContext ctx)
enterExpr_prefix(LittleParser.Expr_prefixContext ctx)
enterFactor(LittleParser.FactorContext ctx)
enterFactor_prefix(LittleParser.Factor_prefixContext ctx)
enterPostfix_expr(LittleParser.Postfix_exprContext ctx)
enterCall_expr(LittleParser.Call_exprContext ctx)
enterExpr_list(LittleParser.Expr_listContext ctx)
exitExpr_list(LittleParser.Expr_listContext ctx)
enterExpr_list_tail(LittleParser.Expr_list_tailContext ctx)
enterPrimary(LittleParser.PrimaryContext ctx)
enterAddop(LittleParser.AddopContext ctx)
enterMulop(LittleParser.MulopContext ctx)
enterIf_stmt(LittleParser.If_stmtContext ctx)
exitIf_stmt(LittleParser.If_stmtContext ctx)
enterElse_part(LittleParser.Else_partContext ctx)
enterCond(LittleParser.CondContext ctx)
enterCompop(LittleParser.CompopContext ctx)
enterWhile_stmt(LittleParser.While_stmtContext ctx)
exitWhile_stmt(LittleParser.While_stmtContext ctx)

4. We believe that linked lists should be used for implementing the symbol tables. We would implement a list of lists to store symbol tables.
The main list would store all the symbol tables, and each symbol table and its related variable declarations would be stored in the inner lists
The main list would act as a stack, pushing on new symbol tables as new scopes are opened and popping them off once said scopes are closed.
We think this would be one of the simplest ways to implement the symbol tables, compared to hash tables or trees, making it our main choice.
Using a list stack would make pushing and popping off symbol tables as scopes are entered and exited very simple.

5. A Visitor is more of a manual mechanism that a Listener. Visitor methods must be called explicitly for each child in the parse tree, and failing to invoke a method to visit any child means the subtree will not be visited. A Listener uses a walker object that calls listener methods on its own as previously defined. A Listener has less control of the traversal of the tree as a result.
